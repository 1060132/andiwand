#!/usr/bin/env python3
import asyncio
from aiohttp import web
import serial

# UART-Konfiguration (anpassen, falls nötig)
UART_PORT = '/dev/serial0'
BAUDRATE = 115200

try:
    ser = serial.Serial(UART_PORT, BAUDRATE, timeout=1)
    print(f"UART auf {UART_PORT} mit {BAUDRATE} Baud geöffnet.")
except Exception as e:
    print("Fehler beim Öffnen des UART-Ports:", e)
    exit(1)

# Globaler Satz aller verbundenen Websocket-Clients
ws_clients = set()

# Websocket-Handler: Verarbeitet eingehende Befehle und sendet sie über UART
async def websocket_handler(request):
    ws = web.WebSocketResponse()
    await ws.prepare(request)
    ws_clients.add(ws)
    print("Neuer Websocket-Client verbunden.")

    try:
        async for msg in ws:
            if msg.type == web.WSMsgType.TEXT:
                command = msg.data.strip()
                print(f"Empfangener Befehl über Websocket: {command}")
                try:
                    # Sende den Befehl per UART (Zeilenende wird hinzugefügt)
                    ser.write((command + "\n").encode('utf-8'))
                    print(f"Befehl '{command}' per UART gesendet.")
                except Exception as e:
                    print("Fehler beim Senden über UART:", e)
                # Optional: Bestätigung zurücksenden
                await ws.send_str(f"Befehl '{command}' empfangen und weitergeleitet.")
            elif msg.type == web.WSMsgType.ERROR:
                print(f"Websocket-Fehler: {ws.exception()}")
    finally:
        ws_clients.remove(ws)
        print("Websocket-Verbindung geschlossen.")
    return ws

# HTTP-Handler für die Startseite: Liefert eine HTML-Seite mit Steuerelementen
async def index(request):
    html_content = """
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Raspberry Pi Steuerung</title>
    <script>
        let ws;
        function init() {
            ws = new WebSocket("ws://" + location.host + "/ws");
            ws.onopen = function() {
                console.log("Websocket verbunden.");
            };
            ws.onmessage = function(event) {
                console.log("Antwort vom Server: " + event.data);
            };
            ws.onerror = function(event) {
                console.error("Websocket-Fehler:", event);
            };
        }
        function sendCommand(cmd) {
            if(ws && ws.readyState === WebSocket.OPEN) {
                ws.send(cmd);
            } else {
                alert("Websocket ist nicht verbunden.");
            }
        }
        window.addEventListener("load", init);
    </script>
    <style>
        button { margin: 5px; padding: 10px; font-size: 16px; }
        .control { margin-bottom: 20px; }
    </style>
</head>
<body>
    <h1>Raspberry Pi Steuerung</h1>
    <div class="control">
        <button onclick="sendCommand('forward')">Vorwärts</button>
        <button onclick="sendCommand('backward')">Rückwärts</button>
        <button onclick="sendCommand('left')">Links</button>
        <button onclick="sendCommand('right')">Rechts</button>
    </div>
</body>
</html>
    """
    return web.Response(text=html_content, content_type='text/html')

# Diese Funktion liest kontinuierlich den UART und leitet empfangene Nachrichten an alle Websocket-Clients weiter
async def uart_listener():
    loop = asyncio.get_running_loop()
    while True:
        # Auslagerung des blockierenden uart.readline() in den Executor
        rxData = await loop.run_in_executor(None, ser.readline)
        if rxData:
            try:
                message = rxData.decode('utf-8').strip()
                print("UART empfangen:", message)
                # Weiterleiten der UART-Nachricht an alle aktiven Websocket-Clients
                for ws in ws_clients.copy():
                    if not ws.closed:
                        await ws.send_str(f"UART: {message}")
            except UnicodeError:
                print("Unicode-Fehler! Ungültige Zeichen über UART empfangen.")

# Erstellen der aiohttp-Anwendung und Definieren der Routen
app = web.Application()
app.add_routes([
    web.get('/', index),
    web.get('/ws', websocket_handler)
])

# Starten des Webservers und des UART-Listeners
if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    # Starten der Task, die kontinuierlich UART-Daten liest
    loop.create_task(uart_listener())
    try:
        web.run_app(app, host='0.0.0.0', port=8080)
    except Exception as e:
        print("Fehler beim Starten des Servers:", e)
